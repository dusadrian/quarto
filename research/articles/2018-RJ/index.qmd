---
type: journal
date: 2018-02-01
title: "Consistency Cubes. A Fast, Efficient Method for exact Boolean Minimization"
description: |
  The third and most recent implementation of the Boolean minimization algorithm
  in package QCA. It is exponentially faster than eQMC, and solves problems tens of
  thousands more complex.
author:
  - name: Adrian Du»ôa
    url: https://adriandusa.eu
    orcid: 0000-0002-3525-9253
    attributes:
      corresponding: true
    affiliation: Department of Sociology, University of Bucharest
    affiliation-url: https://sas.unibuc.ro/en
categories:
  - QCA
  - Boolean minimization
  - Complexity
pub-info:
  links:
    - name: Journal
      url: https://journal.r-project.org/archive/2018/RJ-2018-080/index.html
      icon: fa-solid fa-scroll
    - name: PDF
      url: 2018-RJ.pdf
      icon: fa-solid fa-file-pdf
citation:
  type: article-journal
  url: https://journal.r-project.org/archive/2018/RJ-2018-080/index.html
  publisher: "Springer"
  container-title: "R Journal"
  volume: 10
  issue: 2
  page: 357-370
  issn: 2073-4859
  doi: "10.32614/RJ-2018-080"
---

## Abstract

A lot of effort has been spent over the past few decades in the QCA methodology field, to develop efficient Boolean minimization algorithms to derive an exact, and more importantly complete list of minimal prime implicants that explain the initial, observed positive configurations. As the complexity grows exponentially with every new condition, the required computer memory goes past the current computer resources and the polynomial time required to solve this problem quickly grows towards infinity. This paper introduces a new alternative to the existing non-polynomial attempts. It completely solves the memory problem, and preliminary tests show it is exponentially hundreds of times faster than eQMC, the current 'best' algorithm for QCA in R, and probes into a territory where it competes and even outperforms engineering algorithms such as Espresso, for exact minimizations. While speed is not much of an issue now (eQMC is fast enough for simple data), it might prove to be essential when further developing towards all possible temporal orders, or searching for configurations in panel data over time, combined with / or automation detection of difficult counterfactuals etc.
